<?php
function repositoryartefactsearch_search_info(){
    return array(
    'title' => 'Artefacts',
    'path' => 'artefacts',
    'conditions_callback' => 'repository_callback_search_conditions',
  );
}
function repositoryartefactsearch_form_search_form_alter(&$form, &$form_state) {
  $formFields = array('source','date','description','bibliographicDetails','pageNumbers','series','format','paperType','artefactSize');
  $fieldLabels = array('Source Title', 'Date', 'Description', 'Bibliographic Details', 'Page Numbers', 'Series', 'Format', 'Paper Type', 'Size');
   
  if (isset($form['module']) && $form['module']['#value'] == 'repositoryartefactsearch' && user_access('use advanced search')) {
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced search'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#attributes' => array('class' => array('search-advanced')),
    );
    foreach ($formFields as $i => $f){
      $form['advanced'][$f] = array(
      '#type' => 'textfield',
      '#title' => t($fieldLabels[$i])
      );
    }
    $form['advanced']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Advanced search'),
      '#weight' => 100,
      '#prefix' => '<div class="action">',
      '#suffix' => '</div>'
    );
    // avoid using default validator because it does not allow empty basic search keywords
    $form['#validate'] = array('repositoryartefactsearch_search_form_validate');
  }
}
function repositoryartefactsearch_search_form_validate($form, &$form_state) {
  $formFields = array('source','date','description','bibliographicDetails','pageNumbers','series','format','paperType','artefactSize');
 
  // Initialize using any existing basic search keywords.
  $keys = $form_state['values']['keys'];
  // Insert extra restrictions into the search keywords string.
  foreach ($formFields as $f){
    if (isset($form_state['values'][$f]) && strlen($form_state['values'][$f]) > 0) {
      $keys = search_expression_insert($keys, $f, $form_state['values'][$f]);
    }
  }
  if (!empty($keys)) {
    form_set_value($form['basic']['processed_keys'], trim($keys), $form_state);
  }
}
function repositoryartefactsearch_search_execute($keys = NULL, $conditions = NULL){
    $tempKeys = $keys;
    $formFields = array('source','date','description','bibliographicDetails','pageNumbers','series','format','paperType','artefactSize');
    $searchFields = array();
    foreach ($formFields as $f){
      $searchFields[$f] = search_expression_extract($tempKeys, $f);
      $tempKeys = search_expression_insert($tempKeys,$f);
    }
    $searchTerm = $tempKeys;
    $project = null;
    if (ISSET($conditions['project'])){
        $project = $conditions['project'];
    }

    //$searchResults = _findRecords("artefacts",array("source"),100, 0, 1, $searchTerm,null,$project);


    $client = new Elasticsearch\Client();
    $searchParams['index'] = 'austese';
    $searchParams['type']  = 'artefacts';
    $searchParams['body']['query']['query_string']['query'] = $searchTerm;
    $searchParams['body']['filter']['and'][]['term']['metadata.project'] = $project;
    $searchParams['body']['filter']['and'][]['missing']['field'] = "metadata._superseded";
    $searchParams['body']['filter']['and'][]['missing']['field'] = "metadata._deleted";
    $searchParams['body']['filter']['and'][]['missing']['field'] = "_deleted";
    $searchParams['body']['highlight']['fields']['*'] = array("number_of_fragments" => 3);
    $queryResponse = $client->search($searchParams);

    $results = array();
    foreach($queryResponse['hits']['hits'] as $searchResult) {
        $obj = $searchResult['_source'];
        $id = $obj['_id'];
        $metadata = $obj['metadata'];      // generate uri
        $uri = 'repository/artefacts/' . $id->{'$id'};
        $snippet = "";
        if (ISSET($metadata['description'])){
            $snippet = text_summary($metadata['description']);
        }
        foreach($searchResult['highlight'] as $highlight_field => $highlight_matches) {
          foreach($highlight_matches as $match) {
            $snippet .= $match . "</br>";
          }
        }


        $results [] = array(
          'link' => url($uri, array('absolute' => TRUE)),
            'type' => 'Artefact',
            'title' => $metadata['source'],
            'user' => "",
            'date' => "",
            'extra' => array($metadata['date']),
            'snippet' => $snippet
        );
    }
    return $results;
}
