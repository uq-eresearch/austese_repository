<?php

/**
 * @file
 * Module file for content repository
 */

/**
 * @defgroup repository Content Repository
 * @ingroup austese
 * @{
 * Content Repository
 *
 */

/**
 * Implements hook_help().
 *
 */
function repository_help($path, $arg) {
  switch ($path) {
    case 'repository/agents':
        return t('Content Repository: Agents');
    case 'repository/events':
        return t('Content Repository: Events');
    case 'repository/artefacts':
        return t('Content Repository: Artefacts');
    case 'repository/versions':
        return t('Content Repository: Versions');
    case 'repository/works':
        return t('Content Repository: Works');
    case 'repository/resources':
        return t('Content Repository: Digital Resources');
    case 'repository/places':
        return t('Content Repository: Places');
    case 'admin/help#repository':
        return t('AustESE Content Repository');
  }
}

/**
 * Implements hook_permission().
 *
 */
function repository_permission() {
  return array(
    'edit metadata' => array(
      'title' => t('Edit metadata'),
      'description' => t('Allow users to create and edit metadata in the content repository')
    ),
    'view metadata' => array(
      'title' => t('View metadata'),
      'description' => t('Allow users to view metadata in the content repository')
    )
  );
}

/**
 * Implements hook_menu().
 *
 *
 * @see hook_menu()
 * @see menu_example
 */
function repository_menu() {
    // List object types
    $items['repository'] = array(
    'title' => 'Content Repository',
    'page callback' => 'repository_toc',
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  
  // View objects by type
  $items['repository/%'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_title',
    'page callback' => 'repository_display',
    'page arguments' => array(1),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Add or edit an object of a specific type
  $items['repository/%/edit'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_edit_title',
    'page callback' => 'repository_edit',
    'page arguments' => array(1,3),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Record view for individual objects
  $items['repository/%/%'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_record_title',
    'page callback' => 'repository_display_record',
    'page arguments' => array(1,3),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  return $items;
}
function repository_display_title($title){
    return ucwords($title);
}
function repository_display_edit_title($title){
    if ($title == "resources"){
        return "Edit Resource";
    } else {
        return 'Describe ' . ucwords(substr($title,0,-1));
    }
}
function repository_display_record_title($title){
    return 'View ' . ucwords(substr($title,0,-1));
}
function repository_description() {
  return array('#markup' => t('The austese content repository module'));
}

function repository_display($template){
    if (!in_array($template,array("agents","artefacts","versions","works","resources", "places", "events"))) {
        drupal_access_denied();
        return;
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = l('Repository', 'repository');
    //linkable version of current page: $breadcrumb[] = l(drupal_get_title(), base_path() . request_uri());
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    $modulePath = drupal_get_path('module', 'repository');
    
    drupal_add_js($modulePath . '/ui/js/repository.js');
    drupal_add_css($modulePath . '/ui/css/repository.css');
    drupal_add_js('/sites/all/libraries/ext-4.1.1a/ext-all.js'); 
    if ($template == 'resources'){
        if (!user_access('edit metadata')){
            drupal_access_denied();
            return;
        }
        drupal_add_css($modulePath . '/ui/css/uploader.css');
        drupal_add_js($modulePath . '/ui/js/formdata.js');
        drupal_add_js($modulePath . '/ui/js/uploader.js');
        return theme("resources", array());
    } else if ($template == 'places'){
        drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
        drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
        return theme("display",array());
    } else {
        //drupal_add_js('/sites/all/libraries/ext-4.1.1a/ext.js');
        return theme("display",array());
    }
}
function repository_edit($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "events"))) {
        drupal_access_denied();
        return;
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = l('Repository', 'repository');
    $breadcrumb[] = l(ucwords($template),'repository/'.$template);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/js/jquery.tokeninput.js');
    drupal_add_js($modulePath . '/ui/js/js2form.js');
    drupal_add_js('/sites/all/libraries/ext-4.1.1a/ext-all.js'); 
    drupal_add_js($modulePath . '/ui/js/repository.js');
    if ($template == "resources"){
        drupal_add_js($modulePath . '/ui/js/codemirror.js');
        drupal_add_js($modulePath . '/ui/js/xml.js');
        drupal_add_js($modulePath . '/ui/js/resourceedit.js');
        drupal_add_css($modulePath . '/ui/css/codemirror.css'); 
        drupal_add_css($modulePath . '/ui/css/xml.css'); 
    }
    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css'); 
    drupal_add_css($modulePath . '/ui/css/token-input.css', 
        array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_css($modulePath . '/ui/css/token-input-facebook.css', 
        array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    return theme($template.'_edit',array());
}
function repository_display_record($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "places", "events"))) {
        drupal_access_denied();
        return;
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = l('Repository', 'repository');
    $breadcrumb[] = l(ucwords($template),'repository/'.$template);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    
    drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
    drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
    
    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css'); 
    drupal_add_js('/sites/all/libraries/ext-4.1.1a/ext-all.js'); 
    drupal_add_js($modulePath . '/ui/js/repository.js');
    return theme('display_record',array());
}
function repository_toc() {
  $list[] = l("Artefacts","repository/artefacts");
  $list[] = l("Versions","repository/versions");
  $list[] = l("Works","repository/works");
  $list[] = l("Digital Resources","repository/resources");
  $list[] = l("Agents","repository/agents");
  $list[] = l("Events","repository/events");
  $list[] = l("Places", "repository/places");
  $render_array['repository_list'] = array(
    '#theme' => 'item_list',  
    '#items' => $list
  );
  return $render_array;
}
function repository_theme(){
 return array(
    'display' => array(
        'template' => 'ui/listobjects',
        'variables' => array()
    ),
    'display_record' => array(
        'template' => 'ui/displayobject',
        'variables' => array()
    ),
    'agents_edit' => array(
        'template' => 'ui/agents_edit',
        'variables' => array()
    ),
    'events_edit' => array(
        'template' => 'ui/events_edit',
        'variables' => array()
    ),
    'artefacts_edit' => array(
       'template' => 'ui/artefacts_edit',
       'variables' => array()
    ),
    'versions_edit' => array(
       'template' => 'ui/versions_edit',
       'variables' => array()
    ),
    'works_edit' => array(
       'template' => 'ui/works_edit',
       'variables' => array()
    ),
    'resources_edit' => array(
        'template' => 'ui/resources_edit',
        'variables' => array()
    ),
    'resources' => array(
       'template' => 'ui/uploader',
       'variables' => array()
    ),
 );
}
/** 
 * User preference for launching tools in full screen mode - for repository upload tool and other AustESE tools
 * with full screen option
 */
function repository_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $form['austese'] = array(
    '#type' => 'fieldset',
    '#title' => 'AustESE',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#weight' => 10,
  );
  $form['austese']['fullscreen'] = array(
    '#type' => 'checkbox',
    '#title' => t('AustESE tools launch full screen'),
    '#description' => t('Check this box if you want to launch AustESE tools in fullscreen mode by default'),
    '#return_value' => 1,
    '#default_value' => isset($account->data['fullscreen']) ? $account->data['fullscreen'] : 0 ,
  );
  // TODO add other preferences e.g. default metadata fields to display in editor
}
function repository_user_presave(&$edit, $account, $category) {
  $edit['data']['fullscreen'] = isset($edit['fullscreen']) ? $edit['fullscreen'] : 0;
}
/**
 * @} End of "defgroup repository".
 */
