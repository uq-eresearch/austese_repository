<?php

/**
 * @file
 * Module file for content repository
 */

/**
 * @defgroup repository Content Repository
 * @ingroup austese
 * @{
 * Content Repository
 *
 */

/**
 * Implements hook_help().
 *
 */
function repository_help($path, $arg) {
  switch ($path) {
    case 'repository/agents':
        return t('Content Repository: Agents');
    case 'repository/events':
        return t('Content Repository: Events');
    case 'repository/artefacts':
        return t('Content Repository: Artefacts');
    case 'repository/versions':
        return t('Content Repository: Versions');
    case 'repository/works':
        return t('Content Repository: Works');
    case 'repository/resources':
        return t('Content Repository: Digital Resources');
    case 'repository/places':
        return t('Content Repository: Places');
    case 'admin/help#repository':
        return t('AustESE Content Repository');
  }
}

/**
 * Implements hook_permission().
 *
 */
function repository_permission() {
  return array(
    'edit metadata' => array(
      'title' => t('Edit metadata'),
      'description' => t('Allow users to create and edit ALL metadata in the content repository')
    ),
    'view metadata' => array(
      'title' => t('View metadata'),
      'description' => t('Allow users to view ALL metadata in the content repository')
    ),
    'view visualizations' => array(
      'title' => t('View visualizations'),
      'description' => t('Allow users to view visualizations')
    )
  );
}

/**
 * Implements hook_menu().
 *
 * @see hook_menu()
 * @see menu_example
 */
function repository_menu() {
    // List object types
    $items['repository'] = array(
    'title' => 'Content Repository',
    'page callback' => 'repository_toc',
    'access callback' => TRUE,
   'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  
  // View objects by type
  $items['repository/%'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_title',
    'page callback' => 'repository_display',
    'page arguments' => array(1),
    'access callback' => TRUE,
//    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Add or edit an object of a specific type
  $items['repository/%/edit'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_edit_title',
    'page callback' => 'repository_edit',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
//    'access arguments' => array('edit metadata'),
    'type' => MENU_CALLBACK
  );
  // Visualize an object of a specific type
  $items['repository/%/visualize'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_visualize_title',
    'page callback' => 'repository_visualize',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
//    'access arguments' => array('view visualizations'),
    'type' => MENU_CALLBACK
  );
  // Map events
  $items['repository/events/map'] = array(
    'title' => 'Map of Events',
    'page callback' => 'repository_map_events',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  // Timeline of events
  $items['repository/events/timeline'] = array(
    'title' => 'Timeline of Events',
    'page callback' => 'repository_timeline_events',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  // Chronology of events
  $items['repository/events/chronology'] = array(
    'title' => 'Chronology',
    'page callback' => 'repository_chronology_events',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['repository/resources/%/content'] = array(
    'title' => "",
    'page callback' => 'repository_display_resource',
    'page arguments' => array(2,4),
    'access callback' => TRUE,
//    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Record view for individual objects
  $items['repository/%/%'] = array(
    'title' => "",
    'page callback' => 'repository_display_record',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
//    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  $items['project/%node/projectstatus'] = array(
    'title' => "Project Status",
    'page callback' => 'repository_projectstatus',
    'page arguments' => array(1),
    'access callback' => TRUE,
//    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  $items['project/%node/workflow'] = array(
    'title' => 'Project Workflow',
    'page callback' => 'repository_workflow',
    'page arguments' => array(1),
    'access callback' => TRUE,
//    'access arguments' => array('view metadata')
  );
  return $items;
}

/**
 * Add a hook_xmlrpc call `check_login` for use by other local
 * services to check whether a session cookie is valid.
 *
 */
function repository_xmlrpc() {
  $methods[] = array(
    'check_login',
    'repository_xmlrpc_check_login',
    array(
      'struct',
      'string'),
    t('Check the session is valid')
    );
  return $methods;
}
function repository_xmlrpc_check_login($sid) {
  if ("127.0.0.1" != $_SERVER['REMOTE_ADDR']) {
    return false;
  }
  // Refer: http://api.drupal.org/api/drupal/includes%21session.inc/function/_drupal_session_read/7
  $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = :sid", array(':sid' => $sid))->fetchObject();

  $account = user_load($user->uid);

  $response['valid'] = (bool) $user;

  if ($user) {
    $response['user'] = $user;
    $response['account'] = $account;
    $response['admin'] = in_array('administrator', $account->roles);
  }

  return $response;
}

function repository_display_title($title){
    return ucwords($title);
}
function repository_display_edit_title($title){
    if ($title == "resources"){
        return "Edit Resource";
    } else {
        return 'Describe ' . ucwords(substr($title,0,-1));
    }
}
function repository_display_visualize_title($title){
    return 'Visualize ' . ucwords(substr($title,0,-1));
}
function repository_display_record_title($title){
    return 'View ' . ucwords(substr($title,0,-1));
}
function repository_description() {
  return array('#markup' => t('The austese content repository module'));
}

function _get_projectParam() {
    $projectParam = array();
    if (isset($_GET['project'])) {
        $projectParam = array('query' => array('project' => $_GET['project']));
    }
    return $projectParam;
}

/**
 * Adds the current project to the breadcrumb trail.
 * 
 * @param type $breadcrumb An existing breadcrumb array to modify
 */
function _add_project_or_repository(&$breadcrumb) {
    $projectParam = _get_projectParam();
    if (isset($_GET['project'])) {
        $project = node_load($_GET['project']);
        $breadcrumb[] = l($project->title, 'node/' . $project->nid, $projectParam);
    } else {
        $breadcrumb[] = l('Repository', 'repository',$projectParam);
    }
}

function _assert_valid_record_type($record_type) {
    if (!in_array($record_type,array("agents","artefacts","versions","works","resources", "places", "events", "mvds", "collections"))) {
        drupal_access_denied();
        exit;
    }
}

function repository_display($record_type, $template='Summary') {
    _assert_valid_record_type($record_type);

    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = t(ucfirst($record_type)); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    drupal_add_js($modulePath . '/ui/js/repository.js');
    drupal_add_css($modulePath . '/ui/css/repository.css');
    
    // resource organizer
    if ($record_type == 'resources'){
        if (!austese_access('edit metadata', $project)){
            drupal_access_denied();
            return;
        }
        drupal_add_js(base_path().'sites/all/libraries/ext-4.1.1a/ext-all.js');
        drupal_add_css(base_path().'sites/all/libraries/ext-4.1.1a/resources/css/ext-all.css', array('type'=>'external','every_page' => FALSE));
        drupal_add_css(base_path().'sites/all/libraries/ext-4.1.1a/resources/css/ext-all-gray.css',array('type'=>'external','every_page' => FALSE));
        drupal_add_css($modulePath . '/ui/css/uploader.css');
        drupal_add_js($modulePath . '/ui/lib/formdata.js');
        drupal_add_js($modulePath . '/ui/js/uploader.js');
        
        $project = node_load($project);
        $pshortname = null;
        if ($project){
            $pshortname = $project->field_short_name['und'][0]['value'];
        }
        return theme("repository_resources", array("projectshortname" => $pshortname));
    } else if ($record_type == 'places'){
        drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
        drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
        return theme("repository_display",array("displaytemplate" => $template));
    } else {
        return theme("repository_display",array("displaytemplate" => $template));
    }
}
function repository_edit($record_type, $id=null){
    if (!in_array($record_type,array("agents","artefacts","versions","works", "resources", "events", "mvds", "collections"))) {
        drupal_access_denied();
        return;
    }
    
    $projectParam = _get_projectParam();

    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($record_type),'repository/'.$record_type,$projectParam);
    if ($record_type != 'mvds'){
        $breadcrumb[] = l('View '. ucwords(substr($record_type,0,-1)),'repository/'.$record_type.'/'.$id,$projectParam);
    }
    $breadcrumb[] = t('Edit '. ucfirst(substr($record_type,0,-1))); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('edit metadata', $project);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/select2/select2.min.js');
    // NB: jQuery UI 1.10.x should be installed using jquery update module
    drupal_add_js($modulePath . '/ui/lib/select2/jquery-ui-1.10.3.custom.js');
    drupal_add_css($modulePath . '/ui/lib/select2/select2.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath . '/ui/lib/js2form.js');
    drupal_add_js($modulePath . '/ui/lib/wysihtml5-advanced.js');
    drupal_add_js($modulePath . '/ui/lib/wysihtml5-0.3.0.min.js');
    drupal_add_js($modulePath . '/ui/lib/bootstrap-wysihtml5.js');
    drupal_add_css($modulePath. '/ui/lib/bootstrap-wysihtml5.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js('http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');

    if ($record_type == "resources"){
        if (isset($_GET['multi'])) {
           $multiParam = true;
        } else {
            $multiParam = false;
        }
        drupal_add_js($modulePath . '/ui/lib/jquery.panzoom.min.js');

        drupal_add_js($modulePath . '/ui/lib/codemirror/codemirror.js');
        // support collapsing tags
        drupal_add_js($modulePath. '/ui/lib/codemirror/foldcode.js');
        drupal_add_js($modulePath. '/ui/lib/codemirror/xml-fold.js');
        // support autoclosing tags
        drupal_add_js($modulePath . '/ui/lib/codemirror/closetag.js');
        // support highlighting tags pairs
        drupal_add_js($modulePath . '/ui/lib/codemirror/matchtags.js');
        // autocmpletion
        drupal_add_js($modulePath. '/ui/lib/codemirror/show-hint.js');
        drupal_add_js($modulePath. '/ui/lib/codemirror/xml-hint.js');
        drupal_add_css($modulePath. '/ui/lib/codemirror/show-hint.css');
        drupal_add_css($modulePath . '/ui/css/tei.css');
        if ($multiParam) {
            drupal_add_js($modulePath . '/ui/lib/codemirror/merge/dep/diff_match_patch.js');
            drupal_add_js($modulePath . '/ui/lib/codemirror/merge/merge.js');
            drupal_add_css($modulePath. '/ui/lib/codemirror/merge/merge.css');
        }
        // xml edit
        drupal_add_js($modulePath . '/ui/lib/codemirror/xml.js');
        drupal_add_js($modulePath . '/ui/js/resourceedit.js');
        drupal_add_css($modulePath . '/ui/lib/codemirror/codemirror.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE)); 
    } else {
        drupal_add_js($modulePath . '/ui/js/repository.js');
    }

    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE)); 
    return theme('repository_'.$record_type.'_edit',array());
}

function repository_timeline_events(){
    $projectParam = _get_projectParam();

    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Events','repository/events',$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_css($modulePath.'/ui/lib/timeline/css/timeline.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath.'/ui/lib/timeline/js/storyjs-embed.js');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js'); 
    drupal_add_js($modulePath.'/ui/js/timelineevents.js'); 
    return theme('repository_visualize',array());
}
function repository_chronology_events(){
    return repository_display('events','ChronologyDetail');
}
function repository_map_events($id=null){
    $projectParam = _get_projectParam();

    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Events','repository/events',$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository'); 
    drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
    drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
    drupal_add_css($modulePath . '/ui/css/repository.css'); 
    drupal_add_js($modulePath . '/ui/lib/oms.min.js');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    if (isset($project)) {
        // these fields should be defined on the project content type to provide overridable map config per project
        $projnode = node_load($project);
        $mlong = $projnode->field_map_base_long;
        if ($mlong && sizeof($mlong) > 0) {
            $mapLong = floatval($mlong["und"][0]["value"]);
        } else {
            $mapLong = NULL;
        }
        $mlat = $projnode->field_map_base_lat;
        if ($mlat && sizeof($mlat) > 0) {
            $mapLat = floatval($mlat["und"][0]["value"]);
        } else {
            $mapLat = NULL;
        }
        $mzoom = $projnode->field_map_base_zoom;
        if ($mzoom && sizeof($mzoom) > 0) {
            $mapZoom = intval($mzoom["und"][0]["value"]);
        } else {
            $mapZoom = NULL;
        }
    }
    drupal_add_js($modulePath . '/ui/js/mapevents.js');
    return theme('repository_visualize',array('mapZoom'=>$mapZoom, 'mapLat'=>$mapLat,'mapLong'=>$mapLong));
}

function repository_visualize($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "events"))) {
        drupal_access_denied();
        return;
    }

    // Create breadcrumbs
    $projectParam = _get_projectParam();
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($template),'repository/'.$template,$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/raphael.js');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/dracula_graffle.js');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/dracula_graph.js');
    //drupal_add_js($modulePath . '/ui/js/lib/graphdracula/dracula_algorithms.js');
    drupal_add_js($modulePath . '/ui/js/visualizeentity.js');
    return theme('repository_visualize',array());
}

function repository_display_resource($id,$raw=null){
    $projectParam = _get_projectParam();

    // Create breadcrumbs
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Resources','repository/resources',$projectParam);
    $breadcrumb[] = l('View Resource','repository/resources/'.$id,$projectParam);
    $breadcrumb[] = t('View Resource Content');
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    if ($raw == 'raw'){
        echo repository_render_tei($id);
    } else if ($raw == 'pdf') {
        repository_stream_pdf($id);
    }  else if ($raw == 'word') {
        repository_stream_word($id);
    } else {
        //too slow use ajax instead - return theme('resources_content',array('content'=>$result));
        $modulePath = drupal_get_path('module', 'repository');
        if (isset($_GET['cloud'])) {
            drupal_add_css($modulePath . '/ui/css/repository.css');
            drupal_add_js($modulePath . '/ui/lib/d3cloud/d3.js');
            drupal_add_js($modulePath . '/ui/lib/d3cloud/d3.layout.cloud.js');
            drupal_add_js($modulePath . '/ui/js/wordcloud.js');
        }
        drupal_add_js($modulePath . '/ui/lib/jquery.panzoom.min.js');
        drupal_add_js($modulePath . '/ui/lib/handlebars.js');
        drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
        drupal_add_js($modulePath . '/ui/js/displayresource.js');
        drupal_add_css($modulePath . '/ui/css/tei.css');
        return theme('repository_resources_content',array());
    }
}

/**
 * Only called from `repository_display_resource()`
 * 
 * @param type $id
 * @return type
 */
// shift to repository api
function repository_render_tei($id){
    $modulePath = drupal_get_path('module', 'repository');
    $resurl = 'http://' . $_SERVER['HTTP_HOST'] . "/" . drupal_get_path('module', 'repository') . "/api/resources/" . $id;
    $xslurl = $modulePath . '/ui/xslt/formats.xsl';
    $dom = new DomDocument();
    @$valid = $dom->load($resurl);
    if (!$valid) {
        //watchdog('TEI Content', "Invalid XML/TEI Content", array(), WATCHDOG_WARNING);
        return "<pre style='white-space: pre-wrap'>".file_get_contents($resurl)."</pre>";
    }
    $xslDoc = new DomDocument();
    $xslDoc->load($xslurl);
    
    $proc = new XsltProcessor();
    $proc->importStylesheet($xslDoc);
    return $proc->transformToXML($dom);
}

function repository_display_record($record_type, $id=null){
    if (!in_array($record_type,array("agents","artefacts","versions","works", "resources", "places", "events", "collections"))) {
        drupal_access_denied();
        return;
    }
    $projectParam = _get_projectParam();

    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($record_type),'repository/'.$record_type,$projectParam);
    $breadcrumb[] = t('View ' . ucfirst(substr($record_type,0,-1))); 
    drupal_set_breadcrumb($breadcrumb);
    
    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('view metadata', $project);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    
    drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
    drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
    
    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js'); 
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    drupal_add_js($modulePath . '/ui/js/repository.js');
    return theme('repository_display_record',array());
}

function repository_toc() {
  $projectParam = _get_projectParam();
  $list[] = l("Artefacts","repository/artefacts",$projectParam);
  $list[] = l("Versions","repository/versions",$projectParam);
  $list[] = l("Works","repository/works",$projectParam);
  $list[] = l("Digital Resources","repository/resources",$projectParam);
  $list[] = l("Agents","repository/agents",$projectParam);
  $list[] = l("Events","repository/events",$projectParam);
  $list[] = l("Places", "repository/places",$projectParam);
  $list[] = l("MVDs", "repository/mvds",$projectParam);
  $list[] = l("Collections", "repository/collections",$projectParam);
  $render_array['repository_list'] = array(
    '#theme' => 'item_list',  
    '#items' => $list
  );
  return $render_array;
}

/**
 * Implements hook_theme
 */
function repository_theme(){
 return array(
    'repository_display' => array(
        'template' => 'ui/listobjects',
        'variables' => array()
    ),
    'repository_visualize' => array(
        'template' => 'ui/visualizeobject',
        'variables' => array()
    ),
    'repository_display_record' => array(
        'template' => 'ui/displayobject',
        'variables' => array()
    ),
    'repository_agents_edit' => array(
        'template' => 'ui/agents_edit',
        'variables' => array()
    ),
    'repository_events_edit' => array(
        'template' => 'ui/events_edit',
        'variables' => array()
    ),
    'repository_artefacts_edit' => array(
       'template' => 'ui/artefacts_edit',
       'variables' => array()
    ),
    'repository_versions_edit' => array(
       'template' => 'ui/versions_edit',
       'variables' => array()
    ),
    'repository_works_edit' => array(
       'template' => 'ui/works_edit',
       'variables' => array()
    ),
    'repository_resources_edit' => array(
        'template' => 'ui/resources_edit',
        'variables' => array()
    ),
    'repository_mvds_edit' => array(
        'template' => 'ui/mvds_edit',
        'variables' => array()
    ),
    'repository_collections_edit' => array (
        'template' => 'ui/collections_edit',
        'variables' => array()
    ),
    'repository_resources' => array(
       'template' => 'ui/uploader',
       'variables' => array()
    ),
    'repository_resources_content' => array(
        'template' =>'ui/displayresource',
        'variables' => array('content' => null)
    ),
    'repository_version_toc_block' => array(
        'template' => 'ui/toc_block',
        'variables'=>  array('versionid' => null)
    ),
    'repository_projectstatus' => array(
        'template' => 'ui/projectstatus',
        'variables' => array()
    ),
    'repository_workflow' => array(
        'template' => 'ui/workflow',
        'variables' => array()
    )
 );
}

/** 
 * User preference for launching tools in full screen mode - for repository upload tool and other AustESE tools
 * with full screen option
 */
function repository_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $form['austese'] = array(
    '#type' => 'fieldset',
    '#title' => 'AustESE',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#weight' => 10,
  );
  $form['austese']['fullscreen'] = array(
    '#type' => 'checkbox',
    '#title' => t('AustESE tools launch full screen'),
    '#description' => t('Check this box if you want to launch AustESE tools in fullscreen mode by default'),
    '#return_value' => 1,
    '#default_value' => isset($account->data['fullscreen']) ? $account->data['fullscreen'] : 0 ,
  );
  $form['austese']['organiserlist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Resource Organiser defaults to list'),
    '#description' => t('Check this box if you want to launch the resource organiser in list mode rather than thumbnail mode by default'),
    '#return_value' => 1,
    '#default_value' => isset($account->data['organiserlist']) ? $account->data['organiserlist'] : 0 ,
  );
  // TODO add other preferences e.g. default metadata fields to display in editor
}

function repository_user_presave(&$edit, $account, $category) {
  $edit['data']['fullscreen'] = isset($edit['fullscreen']) ? $edit['fullscreen'] : 0;
  $edit['data']['organiserlist'] = isset($edit['organiserlist']) ? $edit['organiserlist'] : 0;
}


function repository_block_info() {
    $blocks['project_links'] = array(
        'info' => t('Project Admin'),
        'cache' => DRUPAL_NO_CACHE,
    );
    
    return $blocks;
}

function repository_block_view($delta = '') {
    $block = array();
    
    $context = og_context();
    if (isset($context['group_type']) && $context['group_type'] === 'node') {
        $node = node_load($context['gid']);
    }
    if (!isset($node)) {
        return;
    }
//    $node = menu_get_object();
    
    if ($node->type != 'project') {
        return;
    }
    
    $node_url = url('node/' . $node->nid, array('absolute' => TRUE));
    
    $project_id = $node->nid;
    
    switch ($delta) {
        case 'project_links':
            $block['subject'] = t('Project Admin');
            $block['content'] = "
                <a href='/project/$project_id/projectstatus?project=$project_id'>Project Status</a><br>
                <a href='/project/$project_id/workflow?project=$project_id'>Workflow</a><br>
                <a href='/node/add/page?og_group_ref=$project_id'>Add Page</a>
                    ";
            break;
    }
    
    return $block;
}

function repository_projectstatus($node) {
  // Create breadcrumb trail
  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  _add_project_or_repository($breadcrumb);
  $breadcrumb[] = t("Project status"); 
  drupal_set_breadcrumb($breadcrumb);
  
  // check project and permissions
  $project = get_get_parameter('project');
  _check_project_exists($project);
  _check_permission_on_project('manage project', $project);
  
  $config = repositoryapi_get_configuration();
  
  $counts = array(
      'artefacts' => array('title' => 'Artefacts'),
      'versions' => array('title' => 'Versions'),
      'works' => array('title' => 'Works'),
      'agents' => array('title' => 'Agents'),
      'events' => array('title' => 'Events'),
      'mvds' => array('title' => 'MVDs'),
      'collections' => array('title' => 'Collections'),
      'fs.files' => array('title' => 'Digital Resources'),
  );
  
  try {
    $m = new Mongo($config['dbhost'].':'.$config['dbport']);
    $db = $m->selectDB($config['dbname']);
        
    foreach (array_keys($counts) as $recordtype) {
        $coll = $db->selectCollection($recordtype);
        $total = $coll->count(array(
                            'metadata.project' => $node->nid,
                            'metadata._superseded' => array('$exists' => false),
                            '_deleted' => array('$exists' => false)));
        $locked = $coll->count(array(
                            'metadata.project' => $node->nid,
                            '_deleted' => array('$exists' => false),
                            'metadata._superseded' => array('$exists' => false),
                            'metadata.locked' => 'on'));
        $counts[$recordtype]['total'] = $total;
        $counts[$recordtype]['locked'] = $locked;
        $counts[$recordtype]['percent'] = $total < 1 ? "N/A" : sprintf('%01d%%', ($locked / $total)*100);
    }
    
    // Extra checks
    $files = $db->selectCollection('fs.files');
    $numWithRights = $files->count(array(
                                    'metadata.rights' => array('$exists' => true),
                                    'metadata.rights' => array('$ne' => ''),
                                    'metadata._superseded' => array('$exists' => false),
                                    '_deleted' => array('$exists' => false)));
    $counts['filesrights'] = array();
    $counts['filesrights']['title'] = 'Digital resources rights';
    $counts['filesrights']['total'] = $counts['fs.files']['total'];
    $counts['filesrights']['locked'] = $numWithRights;
    $counts['filesrights']['percent'] = '%';
    
    
    $coll = $db->selectCollection('artefacts');
    $coll->count(array(
                    'metadata.project' => $node->nid,
                    '_deleted' => array('$exists' => false),
                    'metadata._superseded' => array('$exists' => false),
                    
                    
    ));
//    $match = array("metadata.project"=>)
    // db.events.aggregate([{$match: {"metadata.project":"22", "metadata.artefacts.0":{$exists:1}}}, {$project: {_id:0, "artefacts":"$metadata.artefacts"}},  {$unwind: "$artefacts"}, {$group: {_id: "artefacts", artefacts: {$addToSet:"$artefacts"}}} ])
    
    return theme("repository_projectstatus",array('counts' => $counts));
  } catch (Exception $e){
    drupal_add_http_header('Status', '500 Internal server error'); 
    echo $e->getMessage();
    exit;
  }
}

/**
 * View: A workflow overview customised for a project
 * @param  Node $project The current project
 * @return drupal render array
 */
function repository_workflow($project) {
    // Create breadcrumb trail
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = t("Project workflow"); 
    drupal_set_breadcrumb($breadcrumb);

    // check project and permissions
    $project = get_get_parameter('project');
    _check_project_exists($project);
    _check_permission_on_project('manage project', $project);
    
    $projParam = "?project=" . $project->nid;
    return theme('repository_workflow', array('node' => $project, 'projParam' => $projParam));
}

/**
 * Implements hook_og_context_negotiation_info
 *
 * Allows setting the project context based on a project get parameter
 */
function repository_og_context_negotiation_info() {
  $providers = array();

  $providers['austese_get_param'] = array(
    'name' => t('AustESE GET Parameter'),
    'description' => t("AustESE: Determine context by checking 'project' GET parameter."),
    'callback' => 'repository_og_context_handler',
  );

  return $providers;
}

/**
 * Evaluates and return group IDs to provide group context.
 *
 * Callback for repository_og_context_negotiation_info().
 *
 * @return
 *  A nested array of group IDs, grouped first by entity type. Each value is
 *  a flat array of group IDs.
 */
function repository_og_context_handler() {
  if (isset($_REQUEST['project']) && is_numeric($_REQUEST['project'])) {
    return array(
        'node' => array($_REQUEST['project'])
    );
  } else {
      return array();
  }
}
/**
 * Add a project parameter to the search form if we're in the context of a project.
 */
function repository_form_search_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'search_form_alter_submit';
  $context = og_context();
  if (isset($context['group_type']) && $context['group_type'] === 'node') {
    $form['project'] = array(
      '#type' => 'hidden',
      '#value' => $context['gid']
    );
  }
}
function repository_form__austese_search_form_alter(&$form, &$form_state) {
  $context = og_context();
  if (isset($context['group_type']) && $context['group_type'] === 'node') {
    $form['project'] = array(
      '#type' => 'hidden',
      '#value' => $context['gid']
    );
  }
}/**
 * Add a project parameter to the redirect so as not to lose the project
 * context.
 * @see repository_form_search_form_alter
 */
function search_form_alter_submit($form, &$form_state) {
  $context = og_context();
  if (isset($context['group_type']) && $context['group_type'] === 'node') {
      $form_state['redirect'] = array($form_state['redirect'],
          array('query' => array('project' => $context['gid'])));
  }
}
/**
 * Add project parameters to all the different types of search links in the nav panel.
 */
function repository_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $context = og_context();
    
  if ($router_item['page_callback'] == 'search_view') {
    if (isset($context['group_type']) && $context['group_type'] === 'node') {
        $project = $context['gid'];
        foreach ($data['tabs'][0]['output'] as &$tab) {
            $tab['#link']['localized_options']['query'] = array('project' => $project);
        }
    }
  }
}

/**
 * Add a project parameter to the list of conditions if in the context of a project.
 * @param type $keys
 * @return type
 */
function repository_callback_search_conditions($keys) {
  $conditions = array();
  $context = og_context();
  if (isset($context['group_type']) && $context['group_type'] === 'node') {
    $conditions['project'] = $context['gid'];
  }
  return $conditions;
}

function repository_stream_pdf($id){
    try {

        require_once("dompdf/dompdf_config.inc.php");
        // include TEI CSS
        $cssurl = drupal_get_path('module', 'repository') . '/ui/css/tei.css';
        $teicss = "<style type='text/css'>pre {font-family:serif;}" . file_get_contents($cssurl) . "</style> ";
        $content = preg_replace('/\r\n?/', "\n", repository_render_tei($id));
        $html =  "<html><head><meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>" . $teicss . "</head><body>" . $content . "</body></html>";
        $dompdf = new DOMPDF();
        $dompdf->load_html($html);
        $dompdf->render();
        $dompdf->stream($id . ".pdf");
        // prevent headers already sent error
        drupal_exit();
    } catch (Exception $e){
        echo $e->getMessage();
    }
}

function repository_stream_word($id){
    try {

        require_once("htmltodoc/html_to_doc.inc.php");
        // include TEI CSS
        $cssurl = drupal_get_path('module', 'repository') . '/ui/css/tei.css';
        $teicss = "<style type='text/css'>pre {font-family:serif;} " . file_get_contents($cssurl) . " </style> ";
        $content = preg_replace('/\r\n?/', "\n", repository_render_tei($id));
        $html =  "<html><head><meta http-equiv='Content-Type' content='text/html; charset=utf-8'/><title>Generated document</title>" . $teicss . "</head><body>" . $content . "</body></html>";
        $htmltodoc = new HTML_TO_DOC();
        $htmltodoc->createDoc($html,$id.".docx",true);
        drupal_exit();
    } catch (Exception $e){
        echo $e->getMessage();
    }
}


/**
 * Takes a list of field names and a list of combined search terms, and splits them apart
 * for submission to a search service.
 * 
 * eg. ["first", "eventType:1899"]
 * returns: $searchTerm = "first"
 *          $searchFields = array("eventType" => "1899")
 * 
 * @param  array $formFields list of possible form fields
 * @param  array $keys       [description]
 * @return array             array($searchTerm, $searchFields)
 */
function _repoapi_process_search_fields($formFields, $keys) {
    $tempKeys = $keys;

    $searchFields = array();
    foreach ($formFields as $f){
        $searchVal = search_expression_extract($tempKeys, $f);
        if (ISSET($searchVal) && $searchVal != "") {
          $searchFields[$f] = search_expression_extract($tempKeys, $f);
          $tempKeys = search_expression_insert($tempKeys,$f);
       }
    }
    $searchTerm = $tempKeys;

    return array($searchTerm, $searchFields);
}

/**
 * @} End of "defgroup repository".
 */
